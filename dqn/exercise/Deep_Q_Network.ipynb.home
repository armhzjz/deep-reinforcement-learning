{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Deep Q-Network (DQN)\n",
    "---\n",
    "In this notebook, you will implement a DQN agent with OpenAI Gym's LunarLander-v2 environment.\n",
    "\n",
    "### 1. Import the Necessary Packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: box2d in /home/pythonist/.conda/envs/deepReinforcement/lib/python3.10/site-packages (2.3.10)\n",
      "Requirement already satisfied: box2d-kengz in /home/pythonist/.conda/envs/deepReinforcement/lib/python3.10/site-packages (2.3.3)\n",
      "Requirement already satisfied: gym[box2d] in /home/pythonist/.conda/envs/deepReinforcement/lib/python3.10/site-packages (0.26.1)\n",
      "Requirement already satisfied: numpy>=1.18.0 in /home/pythonist/.conda/envs/deepReinforcement/lib/python3.10/site-packages (from gym[box2d]) (1.26.0)\n",
      "Requirement already satisfied: cloudpickle>=1.2.0 in /home/pythonist/.conda/envs/deepReinforcement/lib/python3.10/site-packages (from gym[box2d]) (2.2.1)\n",
      "Requirement already satisfied: gym-notices>=0.0.4 in /home/pythonist/.conda/envs/deepReinforcement/lib/python3.10/site-packages (from gym[box2d]) (0.0.8)\n",
      "Requirement already satisfied: box2d-py==2.3.5 in /home/pythonist/.conda/envs/deepReinforcement/lib/python3.10/site-packages (from gym[box2d]) (2.3.5)\n",
      "Requirement already satisfied: pygame==2.1.0 in /home/pythonist/.conda/envs/deepReinforcement/lib/python3.10/site-packages (from gym[box2d]) (2.1.0)\n",
      "Requirement already satisfied: swig==4.* in /home/pythonist/.conda/envs/deepReinforcement/lib/python3.10/site-packages (from gym[box2d]) (4.1.1.post1)\n",
      "Requirement already satisfied: pyvirtualdisplay in /home/pythonist/.conda/envs/deepReinforcement/lib/python3.10/site-packages (3.0)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<contextlib.ExitStack at 0x6358cec5f1f0>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import gymnasium as gym\n",
    "\n",
    "!pip3 install box2d box2d-kengz gym[box2d]\n",
    "import random\n",
    "import torch\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import typing\n",
    "from collections import deque\n",
    "from common.schedulers import LinearScheduler, ExponentialAnnealingScheduler, ExponentialDecay\n",
    "from dqn_agent import Agent, DoubleDQN_Agent, AgentPrioritizedReplayBuf\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "!python -m pip install pyvirtualdisplay\n",
    "from pyvirtualdisplay import Display\n",
    "display = Display(visible=0, size=(1400, 900))\n",
    "display.start()\n",
    "\n",
    "is_ipython = 'inline' in plt.get_backend()\n",
    "if is_ipython:\n",
    "    from IPython import display\n",
    "\n",
    "plt.ion()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. Instantiate the Environment and Agent\n",
    "\n",
    "Initialize the environment in the code cell below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "State shape:  (8,)\n",
      "Number of actions:  4\n"
     ]
    }
   ],
   "source": [
    "env = gym.make('LunarLander-v2', render_mode='rgb_array')\n",
    "print('State shape: ', env.observation_space.shape)\n",
    "print('Number of actions: ', env.action_space.n)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before running the next code cell, familiarize yourself with the code in **Step 2** and **Step 3** of this notebook, along with the code in `dqn_agent.py` and `model.py`.  Once you have an understanding of how the different files work together, \n",
    "- Define a neural network architecture in `model.py` that maps states to action values.  This file is mostly empty - it's up to you to define your own deep Q-network!\n",
    "- Finish the `learn` method in the `Agent` class in `dqn_agent.py`.  The sampled batch of experience tuples is already provided for you; you need only use the local and target Q-networks to compute the loss, before taking a step towards minimizing the loss.\n",
    "\n",
    "Once you have completed the code in `dqn_agent.py` and `model.py`, run the code cell below.  (_If you end up needing to make multiple changes and get unexpected behavior, please restart the kernel and run the cells from the beginning of the notebook!_)\n",
    "\n",
    "You can find the solution files, along with saved model weights for a trained agent, in the `solution/` folder.  (_Note that there are many ways to solve this exercise, and the \"solution\" is just one way of approaching the problem, to yield a trained agent._)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "agent = DoubleDQN_Agent(state_size=8, action_size=4, seed=1536)\n",
    "\n",
    "# watch an untrained agent\n",
    "state = env.reset()[0]\n",
    "img = plt.imshow(env.render())\n",
    "for j in range(200):\n",
    "    action = agent.act(state)\n",
    "    img.set_data(env.render()) \n",
    "    plt.axis('off')\n",
    "    display.display(plt.gcf())\n",
    "    display.clear_output(wait=True)\n",
    "    state, reward, done, _, __ = env.step(action)\n",
    "    if done:\n",
    "        break \n",
    "        \n",
    "env.close()\n",
    "# delete the agent instance, so that any 'local' 'target' network types created will also be removed\n",
    "del agent"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The epsilon decay scheduler\n",
    "\n",
    "Implement here the epsilon decay funtion and alpha and beta schedulers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "_epsilon_scheduler_kwargs = {\n",
    "    \"sched_time_span\": 2000,\n",
    "    \"final_val\": 1e-2,\n",
    "    \"decay_factor\": 0.99\n",
    "}\n",
    "epsilon_scheduler = ExponentialDecay(**_epsilon_scheduler_kwargs)\n",
    "\n",
    "_alpha_scheduler_kwargs = {\n",
    "    \"sched_time_span\": 2000,\n",
    "    \"initial_val\": 0.2,\n",
    "    \"final_val\": 1.,\n",
    "    \"rate\": 0.006\n",
    "}\n",
    "alpha_scheduler = ExponentialAnnealingScheduler(**_alpha_scheduler_kwargs)\n",
    "\n",
    "_beta_scheduler_kwargs = {\n",
    "    \"sched_time_span\": 2000,\n",
    "    \"initial_val\": 0.,\n",
    "    \"final_val\": 1.,\n",
    "    \"rate\": 0.01\n",
    "}\n",
    "beta_scheduler = ExponentialAnnealingScheduler(**_beta_scheduler_kwargs)\n",
    "\n",
    "fig,ax = plt.subplots(1, 1, figsize=(10,6))\n",
    "ax.set_ylabel(\"Epsilon\", rotation=\"vertical\", fontsize=20)\n",
    "ax.set_xlabel(\"Number of episodes\", fontsize=15)\n",
    "ax.set_title(\"Epsilon decay over thet episodes\")\n",
    "\n",
    "ep = np.arange(2000)\n",
    "eps_vals = [epsilon_scheduler(e) for e in ep]\n",
    "alpha_vals = [alpha_scheduler(e) for e in ep]\n",
    "beta_vals = [beta_scheduler(e) for e in ep]\n",
    "ax.plot(ep, eps_vals, label=\"epsilon\")\n",
    "ax.plot(ep, alpha_vals, label=\"alpha\")\n",
    "ax.plot(ep, beta_vals, label=\"beta\")\n",
    "leg = plt.legend(loc='best')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. Train the Agent with DQN\n",
    "\n",
    "Run the code cell below to train the agent from scratch.  You are welcome to amend the supplied values of the parameters in the function, to try to see if you can get better performance!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Episode 100\tAverage Score: -163.75\tLatest score: 12.40798\n",
      "Episode 200\tAverage Score: -14.19\tLatest score: -29.358941\n",
      "Episode 300\tAverage Score: 54.92\tLatest score: 121.677903\n",
      "Episode 400\tAverage Score: 80.76\tLatest score: 104.4163\n",
      "Episode 500\tAverage Score: 82.12\tLatest score: 140.27716\n",
      "Episode 600\tAverage Score: 87.33\tLatest score: 104.53895\n",
      "Episode 700\tAverage Score: 82.23\tLatest score: -156.84357\n",
      "Episode 800\tAverage Score: 126.50\tLatest score: 120.52800\n",
      "Episode 900\tAverage Score: 154.09\tLatest score: 285.07180\n",
      "Episode 1000\tAverage Score: 160.84\tLatest score: 200.6292\n",
      "Episode 1100\tAverage Score: 201.77\tLatest score: 191.33649\n",
      "Episode 1200\tAverage Score: 205.04\tLatest score: 283.8917\n",
      "Episode 1300\tAverage Score: 197.87\tLatest score: 276.04904\n",
      "Episode 1400\tAverage Score: 201.02\tLatest score: 260.40455\n",
      "Episode 1500\tAverage Score: 198.20\tLatest score: -19.95245\n",
      "Episode 1600\tAverage Score: 212.29\tLatest score: 269.0771\n",
      "Episode 1675\tAverage Score: 169.56\tLatest score: 188.56450"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[5], line 56\u001b[0m\n\u001b[1;32m     47\u001b[0m agent \u001b[38;5;241m=\u001b[39m DoubleDQN_Agent(state_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m8\u001b[39m, action_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m4\u001b[39m, seed\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m761\u001b[39m)\n\u001b[1;32m     48\u001b[0m _double_dqn_kwargs \u001b[38;5;241m=\u001b[39m {\n\u001b[1;32m     49\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdqn_agent\u001b[39m\u001b[38;5;124m\"\u001b[39m: agent,\n\u001b[1;32m     50\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mn_episodes\u001b[39m\u001b[38;5;124m\"\u001b[39m: \u001b[38;5;241m5000\u001b[39m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     54\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtarget_mean_score\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;241m245.\u001b[39m\n\u001b[1;32m     55\u001b[0m }\n\u001b[0;32m---> 56\u001b[0m double_dqn_scores \u001b[38;5;241m=\u001b[39m \u001b[43mdouble_dqn\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43m_double_dqn_kwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     58\u001b[0m \u001b[38;5;66;03m# plot the scores\u001b[39;00m\n\u001b[1;32m     59\u001b[0m fig, axes \u001b[38;5;241m=\u001b[39m plt\u001b[38;5;241m.\u001b[39msubplots(\u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m1\u001b[39m, figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m10\u001b[39m, \u001b[38;5;241m6\u001b[39m), sharex\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m, sharey\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n",
      "Cell \u001b[0;32mIn[5], line 30\u001b[0m, in \u001b[0;36mdouble_dqn\u001b[0;34m(dqn_agent, n_episodes, max_t, eps_decay_fn, UPDATE_EVERY, target_mean_score)\u001b[0m\n\u001b[1;32m     28\u001b[0m     action \u001b[38;5;241m=\u001b[39m dqn_agent\u001b[38;5;241m.\u001b[39mact(state, eps)\n\u001b[1;32m     29\u001b[0m next_state, reward, done, truncated, _ \u001b[38;5;241m=\u001b[39m env\u001b[38;5;241m.\u001b[39mstep(action)\n\u001b[0;32m---> 30\u001b[0m \u001b[43mdqn_agent\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstep\u001b[49m\u001b[43m(\u001b[49m\u001b[43mstate\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maction\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreward\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnext_state\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdone\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mt_step\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     31\u001b[0m state \u001b[38;5;241m=\u001b[39m next_state\n\u001b[1;32m     32\u001b[0m score \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m reward\n",
      "File \u001b[0;32m/workspaces/deep-reinforcement-learning/dqn/exercise/dqn_agent.py:92\u001b[0m, in \u001b[0;36mDoubleDQN_Agent.step\u001b[0;34m(self, state, action, reward, next_state, done, t_step)\u001b[0m\n\u001b[1;32m     90\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_underline_step(state, action, reward, next_state, done, t_step):\n\u001b[1;32m     91\u001b[0m     experiences \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmemory\u001b[38;5;241m.\u001b[39msample(BATCH_SIZE)\n\u001b[0;32m---> 92\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mlearn\u001b[49m\u001b[43m(\u001b[49m\u001b[43mexperiences\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mGAMMA\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/workspaces/deep-reinforcement-learning/dqn/exercise/dqn_agent.py:129\u001b[0m, in \u001b[0;36mDoubleDQN_Agent.learn\u001b[0;34m(self, experiences, gamma)\u001b[0m\n\u001b[1;32m    127\u001b[0m Q_next \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_target_model(next_states)\u001b[38;5;241m.\u001b[39mdetach()\u001b[38;5;241m.\u001b[39mmax(\u001b[38;5;241m1\u001b[39m)[\u001b[38;5;241m0\u001b[39m]\u001b[38;5;241m.\u001b[39munsqueeze(\u001b[38;5;241m1\u001b[39m)\n\u001b[1;32m    128\u001b[0m Q_target \u001b[38;5;241m=\u001b[39m rewards \u001b[38;5;241m+\u001b[39m (gamma \u001b[38;5;241m*\u001b[39m Q_next \u001b[38;5;241m*\u001b[39m (\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m-\u001b[39m dones))\n\u001b[0;32m--> 129\u001b[0m Q \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_training_model\u001b[49m\u001b[43m(\u001b[49m\u001b[43mstates\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241m.\u001b[39mgather(\u001b[38;5;241m1\u001b[39m, actions)\n\u001b[1;32m    130\u001b[0m loss \u001b[38;5;241m=\u001b[39m F\u001b[38;5;241m.\u001b[39mmse_loss(Q_target, Q)\n\u001b[1;32m    131\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39moptimizer\u001b[38;5;241m.\u001b[39mzero_grad()\n",
      "File \u001b[0;32m~/.conda/envs/deepReinforcement/lib/python3.10/site-packages/torch/nn/modules/module.py:1518\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1516\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1517\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1518\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call_impl\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/.conda/envs/deepReinforcement/lib/python3.10/site-packages/torch/nn/modules/module.py:1527\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1522\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1523\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1524\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1525\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1526\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1527\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mforward_call\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1529\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1530\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "File \u001b[0;32m/workspaces/deep-reinforcement-learning/dqn/exercise/model.py:50\u001b[0m, in \u001b[0;36mQNetwork.forward\u001b[0;34m(self, state)\u001b[0m\n\u001b[1;32m     45\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"Build a network that maps state -> action values.\"\"\"\u001b[39;00m\n\u001b[1;32m     46\u001b[0m \u001b[38;5;66;03m#o = self.relu(self.conv_hidden1(state))\u001b[39;00m\n\u001b[1;32m     47\u001b[0m \u001b[38;5;66;03m#o = self.relu(self.conv_hidden2(o))\u001b[39;00m\n\u001b[1;32m     48\u001b[0m \u001b[38;5;66;03m#o = self.relu(self.conv_hidden3(o))\u001b[39;00m\n\u001b[1;32m     49\u001b[0m \u001b[38;5;66;03m#o = self.relu(self.fc1(o.view(-1, 64*7*7)))\u001b[39;00m\n\u001b[0;32m---> 50\u001b[0m o_main \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrelu\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfc_main\u001b[49m\u001b[43m(\u001b[49m\u001b[43mstate\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     51\u001b[0m o_lateral \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mrelu(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfc_lateral(state))\n\u001b[1;32m     52\u001b[0m o_physics \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mrelu(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfc_physics(state))\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "def double_dqn(\n",
    "        dqn_agent,\n",
    "        n_episodes,\n",
    "        max_t,\n",
    "        eps_decay_fn: typing.Callable[[float], float],\n",
    "        UPDATE_EVERY:int = 4,\n",
    "        target_mean_score=200.0):\n",
    "    \"\"\"Deep Q-Learning.\n",
    "    \n",
    "    Params\n",
    "    ======\n",
    "        n_episodes (int): maximum number of training episodes\n",
    "        max_t (int): maximum number of timesteps per episode\n",
    "        eps_start (float): starting value of epsilon, for epsilon-greedy action selection\n",
    "        eps_end (float): minimum value of epsilon\n",
    "        eps_decay (float): multiplicative factor (per episode) for decreasing epsilon\n",
    "    \"\"\"\n",
    "    scores = []                        # list containing scores from each episode\n",
    "    scores_window = deque(maxlen=100)  # last 100 scores\n",
    "    t_step = -1\n",
    "    for i_episode in range(1, n_episodes+1):\n",
    "        state = env.reset()[0]\n",
    "        score = 0\n",
    "        eps = eps_decay_fn(i_episode)\n",
    "        for t in range(max_t):\n",
    "            t_step = (t_step + 1) % UPDATE_EVERY\n",
    "            if t_step == 0:\n",
    "                action = dqn_agent.act(state, eps)\n",
    "            next_state, reward, done, truncated, _ = env.step(action)\n",
    "            dqn_agent.step(state, action, reward, next_state, done, t_step)\n",
    "            state = next_state\n",
    "            score += reward\n",
    "            if done:  # or truncated:\n",
    "                break\n",
    "        scores_window.append(score)       # save most recent score\n",
    "        scores.append(score)              # save most recent score\n",
    "        print('\\rEpisode {}\\tAverage Score: {:.2f}\\tLatest score: {:.4f}'.format(i_episode, np.mean(scores_window), score), end='')\n",
    "        if i_episode % 100 == 0:\n",
    "            print('\\rEpisode {}\\tAverage Score: {:.2f}\\tLatest score: {:.4f}'.format(i_episode, np.mean(scores_window), score))\n",
    "        scores_windows_list = list(scores_window)\n",
    "        if np.mean(scores_window) >= target_mean_score and np.mean(scores_windows_list[-10:]) >= target_mean_score:\n",
    "            print('\\nEnvironment solved in {:d} episodes!\\tAverage Score: {:.2f}'.format(i_episode-100, np.mean(scores_window)))\n",
    "            torch.save(dqn_agent.qnetwork_model.state_dict(), 'double_dqn_checkpoint.pth')\n",
    "            break\n",
    "    return pd.Series(scores, name=\"scores\")\n",
    "\n",
    "agent = DoubleDQN_Agent(state_size=8, action_size=4, seed=761)\n",
    "_double_dqn_kwargs = {\n",
    "    \"dqn_agent\": agent,\n",
    "    \"n_episodes\": 5000,\n",
    "    \"max_t\": 250,\n",
    "    \"eps_decay_fn\": epsilon_scheduler,\n",
    "    \"UPDATE_EVERY\": 4,\n",
    "    \"target_mean_score\":245.\n",
    "}\n",
    "double_dqn_scores = double_dqn(**_double_dqn_kwargs)\n",
    "\n",
    "# plot the scores\n",
    "fig, axes = plt.subplots(1, 1, figsize=(10, 6), sharex=True, sharey=True)\n",
    "double_dqn_scores.plot(ax=axes, label=\"DQN Scores\")\n",
    "(double_dqn_scores.rolling(window=100)\n",
    "           .mean()\n",
    "           .rename(\"Rolling Average\")\n",
    "           .plot(ax=axes))\n",
    "axes.legend()\n",
    "_ = axes.set_ylabel(\"Score\")\n",
    "del agent"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4. Watch a Smart Agent!\n",
    "\n",
    "In the next code cell, you will load the trained weights from file to watch a smart agent!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "frame_counters = []\n",
    "rewards = []\n",
    "# load the weights from file\n",
    "trained_agent = DoubleDQN_Agent(state_size=8, action_size=4, seed=761)\n",
    "trained_agent.qnetwork_model.load_state_dict(torch.load('double_dqn_checkpoint.pth'))\n",
    "for i in range(5):\n",
    "    total_rewards = 0\n",
    "    frame_counter = 0\n",
    "    state = env.reset()[0]\n",
    "    img = plt.imshow(env.render())\n",
    "    for j in range(200):\n",
    "        action = trained_agent.act(state)\n",
    "        img.set_data(env.render()) \n",
    "        plt.axis('off')\n",
    "        display.display(plt.gcf())\n",
    "        display.clear_output(wait=True)\n",
    "        state, reward, done, _, __ = env.step(action)\n",
    "        frame_counter += 1\n",
    "        total_rewards += reward\n",
    "        if done:\n",
    "            break\n",
    "    frame_counters.append(frame_counter)\n",
    "    rewards.append(total_rewards)\n",
    "del trained_agent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rewards: [306.0397824675781, 283.8078575758004, 273.59011327710687, 271.5033461525877, 286.7743971315776]\n",
      "frame counters: [150, 190, 184, 180, 190]\n"
     ]
    }
   ],
   "source": [
    "print(f'rewards: {rewards}')\n",
    "print(f'frame counters: {frame_counters}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### C) Double DQN with Prioritized Replay Buffer\n",
    "#### Train the Agent with DQN\n",
    "\n",
    "Run the code cell below to train the agent from scratch.  You are welcome to amend the supplied values of the parameters in the function, to try to see if you can get better performance!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Episode 100\tAverage Score: -196.18\tLatest score: -334.1085\n",
      "Episode 200\tAverage Score: -76.30\tLatest score: 46.1480155\n",
      "Episode 300\tAverage Score: -50.54\tLatest score: -96.56893\n",
      "Episode 400\tAverage Score: -19.52\tLatest score: 6.4992634\n",
      "Episode 500\tAverage Score: 34.01\tLatest score: 81.8986707\n",
      "Episode 600\tAverage Score: -1.81\tLatest score: -31.68861\n",
      "Episode 700\tAverage Score: 0.11\tLatest score: -37.0959800\n",
      "Episode 800\tAverage Score: 20.51\tLatest score: 149.61304\n",
      "Episode 900\tAverage Score: 36.21\tLatest score: 76.683985\n",
      "Episode 1000\tAverage Score: -5.15\tLatest score: -162.5859\n",
      "Episode 1100\tAverage Score: -48.05\tLatest score: -39.06984\n",
      "Episode 1200\tAverage Score: -29.14\tLatest score: 43.355342\n",
      "Episode 1300\tAverage Score: 7.70\tLatest score: 43.91896961\n",
      "Episode 1400\tAverage Score: -50.49\tLatest score: -35.38477\n",
      "Episode 1500\tAverage Score: 21.53\tLatest score: 125.462234\n",
      "Episode 1600\tAverage Score: 48.05\tLatest score: 113.74384\n",
      "Episode 1700\tAverage Score: 0.31\tLatest score: -20.026492\n",
      "Episode 1800\tAverage Score: 48.87\tLatest score: 29.645800\n",
      "Episode 1900\tAverage Score: 73.21\tLatest score: 88.995999\n",
      "Episode 2000\tAverage Score: 65.99\tLatest score: 5.7927712\n",
      "Episode 2100\tAverage Score: 82.79\tLatest score: 70.608250\n",
      "Episode 2200\tAverage Score: 88.03\tLatest score: 50.9792612\n",
      "Episode 2300\tAverage Score: 105.52\tLatest score: 108.27288\n",
      "Episode 2400\tAverage Score: 70.76\tLatest score: 139.24482\n",
      "Episode 2500\tAverage Score: 10.11\tLatest score: 53.644935\n",
      "Episode 2600\tAverage Score: 66.84\tLatest score: -102.7965\n",
      "Episode 2700\tAverage Score: 29.63\tLatest score: 148.56417\n",
      "Episode 2800\tAverage Score: 90.48\tLatest score: 78.613083\n",
      "Episode 2900\tAverage Score: 102.29\tLatest score: 148.48679\n",
      "Episode 3000\tAverage Score: 131.34\tLatest score: 154.01981\n",
      "Episode 3100\tAverage Score: 100.02\tLatest score: 157.06418\n",
      "Episode 3200\tAverage Score: 112.29\tLatest score: 236.38690\n",
      "Episode 3300\tAverage Score: 155.68\tLatest score: 108.9350\n",
      "Episode 3400\tAverage Score: 65.99\tLatest score: 98.5388071\n",
      "Episode 3500\tAverage Score: 152.39\tLatest score: 177.59962\n",
      "Episode 3600\tAverage Score: 129.14\tLatest score: 99.913739\n",
      "Episode 3690\tAverage Score: 126.78\tLatest score: 103.83742"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[4], line 63\u001b[0m\n\u001b[1;32m     60\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m pd\u001b[38;5;241m.\u001b[39mSeries(scores, name\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mscores\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m     62\u001b[0m agent \u001b[38;5;241m=\u001b[39m AgentPrioritizedReplayBuf(state_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m8\u001b[39m, action_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m4\u001b[39m, seed\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m761\u001b[39m, alpha\u001b[38;5;241m=\u001b[39mINIT_ALPHA_VALUE)\n\u001b[0;32m---> 63\u001b[0m ddqn_prio_replaybuff_scores \u001b[38;5;241m=\u001b[39m \u001b[43mdouble_dqn_prioritizedReplayBuffer\u001b[49m\u001b[43m(\u001b[49m\u001b[43magent\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mn_episodes\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m5000\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmax_t\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m250\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m     64\u001b[0m \u001b[43m                                                                 \u001b[49m\u001b[43malpha_start\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mINIT_ALPHA_VALUE\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43malpha_end\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m1.\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m     65\u001b[0m \u001b[43m                                                                 \u001b[49m\u001b[43mbeta_start\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mINIT_BETA_VALUE\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbeta_end\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m1.\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m     66\u001b[0m \u001b[43m                                                                 \u001b[49m\u001b[43mUPDATE_EVERY\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m4\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m     67\u001b[0m \u001b[43m                                                                 \u001b[49m\u001b[43mtarget_mean_score\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m245.\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m     69\u001b[0m \u001b[38;5;66;03m# plot the scores\u001b[39;00m\n\u001b[1;32m     70\u001b[0m fig, axes \u001b[38;5;241m=\u001b[39m plt\u001b[38;5;241m.\u001b[39msubplots(\u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m1\u001b[39m, figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m10\u001b[39m, \u001b[38;5;241m6\u001b[39m), sharex\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m, sharey\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n",
      "Cell \u001b[0;32mIn[4], line 43\u001b[0m, in \u001b[0;36mdouble_dqn_prioritizedReplayBuffer\u001b[0;34m(dqn_agent, n_episodes, max_t, eps_start, eps_end, eps_decay, alpha_start, alpha_end, beta_start, beta_end, UPDATE_EVERY, target_mean_score)\u001b[0m\n\u001b[1;32m     41\u001b[0m     action \u001b[38;5;241m=\u001b[39m dqn_agent\u001b[38;5;241m.\u001b[39mact(state, eps)\n\u001b[1;32m     42\u001b[0m next_state, reward, done, truncated, _ \u001b[38;5;241m=\u001b[39m env\u001b[38;5;241m.\u001b[39mstep(action)\n\u001b[0;32m---> 43\u001b[0m \u001b[43mdqn_agent\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstep\u001b[49m\u001b[43m(\u001b[49m\u001b[43mstate\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstate\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maction\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maction\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreward\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mreward\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnext_state\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mnext_state\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdone\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdone\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m     44\u001b[0m \u001b[43m               \u001b[49m\u001b[43mt_step\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mt_step\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnew_alpha\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43malpha_scheduler\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_step\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnew_beta\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbeta_scheduler\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_step\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     45\u001b[0m state \u001b[38;5;241m=\u001b[39m next_state\n\u001b[1;32m     46\u001b[0m score \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m reward\n",
      "File \u001b[0;32m/workspaces/deep-reinforcement-learning/dqn/exercise/dqn_agent.py:180\u001b[0m, in \u001b[0;36mAgentPrioritizedReplayBuf.step\u001b[0;34m(self, state, action, reward, next_state, done, t_step, new_alpha, new_beta)\u001b[0m\n\u001b[1;32m    177\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_underline_step(state, action, reward, next_state, done, t_step):\n\u001b[1;32m    178\u001b[0m     \u001b[38;5;241m*\u001b[39mexperiences, weights, indices \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmemory\u001b[38;5;241m.\u001b[39msample(batch_size\u001b[38;5;241m=\u001b[39mBATCH_SIZE,\n\u001b[1;32m    179\u001b[0m                                                         beta\u001b[38;5;241m=\u001b[39mnew_beta)\n\u001b[0;32m--> 180\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mlearn\u001b[49m\u001b[43m(\u001b[49m\u001b[43mexperiences\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mexperiences\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgamma\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mGAMMA\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mweights\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mweights\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mindices\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mindices\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/workspaces/deep-reinforcement-learning/dqn/exercise/dqn_agent.py:205\u001b[0m, in \u001b[0;36mAgentPrioritizedReplayBuf.learn\u001b[0;34m(self, experiences, gamma, weights, indices)\u001b[0m\n\u001b[1;32m    203\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msoft_update(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_training_model, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_target_model, TAU)\n\u001b[1;32m    204\u001b[0m \u001b[38;5;66;03m# update priorities\u001b[39;00m\n\u001b[0;32m--> 205\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmemory\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mupdate_priorities\u001b[49m\u001b[43m(\u001b[49m\u001b[43midxs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mindices\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpriorities\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtd_error\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mnumpy\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;241;43m5e-5\u001b[39;49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/workspaces/deep-reinforcement-learning/dqn/exercise/common/replay_buffer.py:125\u001b[0m, in \u001b[0;36mPrioritizedReplayBuffer.update_priorities\u001b[0;34m(self, idxs, priorities)\u001b[0m\n\u001b[1;32m    123\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;241m0\u001b[39m \u001b[38;5;241m<\u001b[39m\u001b[38;5;241m=\u001b[39m idx \u001b[38;5;241m<\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;21m__len__\u001b[39m()):\n\u001b[1;32m    124\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mIndex is out of Buffer capacity\u001b[39m\u001b[38;5;130;01m\\'\u001b[39;00m\u001b[38;5;124ms range\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m--> 125\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_it_sum[idx] \u001b[38;5;241m=\u001b[39m priority\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_alpha\n\u001b[1;32m    126\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_it_min[idx] \u001b[38;5;241m=\u001b[39m priority\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_alpha\n\u001b[1;32m    127\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_max_priority \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mmax\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_max_priority, priority)\n",
      "File \u001b[0;32m/workspaces/deep-reinforcement-learning/dqn/exercise/common/segment_tree.py:98\u001b[0m, in \u001b[0;36mSegmentTree.__setitem__\u001b[0;34m(self, idx, val)\u001b[0m\n\u001b[1;32m     96\u001b[0m idx \u001b[38;5;241m/\u001b[39m\u001b[38;5;241m/\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m2\u001b[39m\n\u001b[1;32m     97\u001b[0m \u001b[38;5;28;01mwhile\u001b[39;00m idx \u001b[38;5;241m>\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m---> 98\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_value[idx] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_operation\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_value\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m2\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43m \u001b[49m\u001b[43midx\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_value\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m2\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43m \u001b[49m\u001b[43midx\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     99\u001b[0m     idx \u001b[38;5;241m/\u001b[39m\u001b[38;5;241m/\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m2\u001b[39m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "INIT_ALPHA_VALUE = 1.\n",
    "INIT_BETA_VALUE = 1.\n",
    "def double_dqn_prioritizedReplayBuffer(\n",
    "        dqn_agent,\n",
    "        n_episodes=2000,\n",
    "        max_t=1000,\n",
    "        eps_start=1.0,\n",
    "        eps_end=0.01,\n",
    "        eps_decay=0.995,\n",
    "        alpha_start=0.,\n",
    "        alpha_end=1.,\n",
    "        beta_start=0.,\n",
    "        beta_end=1.,\n",
    "        UPDATE_EVERY = 4,\n",
    "        target_mean_score=200.0):\n",
    "    \"\"\"Deep Q-Learning.\n",
    "    \n",
    "    Params\n",
    "    ======\n",
    "        n_episodes (int): maximum number of training episodes\n",
    "        max_t (int): maximum number of timesteps per episode\n",
    "        eps_start (float): starting value of epsilon, for epsilon-greedy action selection\n",
    "        eps_end (float): minimum value of epsilon\n",
    "        eps_decay (float): multiplicative factor (per episode) for decreasing epsilon\n",
    "    \"\"\"\n",
    "    scores = []                        # list containing scores from each episode\n",
    "    scores_window = deque(maxlen=100)  # last 100 scores\n",
    "    eps = eps_start                    # initialize epsilon\n",
    "    t_step = -1\n",
    "    alpha_scheduler = LinearScheduler(sched_time_span=n_episodes-0.05*n_episodes, initial_val=alpha_start,\n",
    "                                      final_val=alpha_end)\n",
    "    beta_scheduler = LinearScheduler(sched_time_span=n_episodes-0.05*n_episodes, initial_val=beta_start,\n",
    "                                     final_val=beta_end)\n",
    "    for i_episode in range(1, n_episodes+1):\n",
    "        state = env.reset()[0]\n",
    "        score = 0\n",
    "        \n",
    "        for t in range(max_t):\n",
    "            t_step = (t_step + 1) % UPDATE_EVERY\n",
    "            if t_step == 0:\n",
    "                action = dqn_agent.act(state, eps)\n",
    "            next_state, reward, done, truncated, _ = env.step(action)\n",
    "            dqn_agent.step(state=state, action=action, reward=reward, next_state=next_state, done=done,\n",
    "                           t_step=t_step, new_alpha=alpha_scheduler.get_step(), new_beta=beta_scheduler.get_step())\n",
    "            state = next_state\n",
    "            score += reward\n",
    "            if done:  # or truncated:\n",
    "                break\n",
    "        scores_window.append(score)       # save most recent score\n",
    "        scores.append(score)              # save most recent score\n",
    "        eps = max(eps_end, eps_decay*eps) # decrease epsilon\n",
    "        print('\\rEpisode {}\\tAverage Score: {:.2f}\\tLatest score: {:.4f}'.format(i_episode, np.mean(scores_window), score), end='')\n",
    "        if i_episode % 100 == 0:\n",
    "            print('\\rEpisode {}\\tAverage Score: {:.2f}\\tLatest score: {:.4f}'.format(i_episode, np.mean(scores_window), score))\n",
    "        scores_windows_list = list(scores_window)\n",
    "        if np.mean(scores_window) >= target_mean_score and np.mean(scores_windows_list[-10:]) >= target_mean_score:\n",
    "            print('\\nEnvironment solved in {:d} episodes!\\tAverage Score: {:.2f}'.format(i_episode-100, np.mean(scores_window)))\n",
    "            torch.save(dqn_agent.qnetwork_model.state_dict(), 'ddqn_prio_replaybuff_checkpoint.pth')\n",
    "            break\n",
    "    return pd.Series(scores, name=\"scores\")\n",
    "\n",
    "agent = AgentPrioritizedReplayBuf(state_size=8, action_size=4, seed=761, alpha=INIT_ALPHA_VALUE)\n",
    "ddqn_prio_replaybuff_scores = double_dqn_prioritizedReplayBuffer(agent, n_episodes=5000, max_t=250,\n",
    "                                                                 alpha_start=INIT_ALPHA_VALUE, alpha_end=1.,\n",
    "                                                                 beta_start=INIT_BETA_VALUE, beta_end=1.,\n",
    "                                                                 UPDATE_EVERY=4,\n",
    "                                                                 target_mean_score=245.)\n",
    "\n",
    "# plot the scores\n",
    "fig, axes = plt.subplots(1, 1, figsize=(10, 6), sharex=True, sharey=True)\n",
    "ddqn_prio_replaybuff_scores.plot(ax=axes, label=\"DQN Scores\")\n",
    "(ddqn_prio_replaybuff_scores.rolling(window=100)\n",
    "           .mean()\n",
    "           .rename(\"Rolling Average\")\n",
    "           .plot(ax=axes))\n",
    "axes.legend()\n",
    "_ = axes.set_ylabel(\"Score\")\n",
    "del agent"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Watch a Smart Agent!\n",
    "\n",
    "In the next code cell, you will load the trained weights from file to watch a smart agent!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "frame_counters = []\n",
    "rewards = []\n",
    "# load the weights from file\n",
    "trained_agent = AgentPrioritizedReplayBuf(state_size=8, action_size=4, seed=761)\n",
    "trained_agent.qnetwork_model.load_state_dict(torch.load('ddqn_prio_replaybuff_checkpoint.pth'))\n",
    "for i in range(5):\n",
    "    total_rewards = 0\n",
    "    frame_counter = 0\n",
    "    state = env.reset()[0]\n",
    "    img = plt.imshow(env.render())\n",
    "    for j in range(200):\n",
    "        action = trained_agent.act(state)\n",
    "        img.set_data(env.render()) \n",
    "        plt.axis('off')\n",
    "        display.display(plt.gcf())\n",
    "        display.clear_output(wait=True)\n",
    "        state, reward, done, _, __ = env.step(action)\n",
    "        frame_counter += 1\n",
    "        total_rewards += reward\n",
    "        if done:\n",
    "            break\n",
    "    frame_counters.append(frame_counter)\n",
    "    rewards.append(total_rewards)\n",
    "del trained_agent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(f'rewards: {rewards}')\n",
    "print(f'frame counters: {frame_counters}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5. Explore\n",
    "\n",
    "In this exercise, you have implemented a DQN agent and demonstrated how to use it to solve an OpenAI Gym environment.  To continue your learning, you are encouraged to complete any (or all!) of the following tasks:\n",
    "- Amend the various hyperparameters and network architecture to see if you can get your agent to solve the environment faster.  Once you build intuition for the hyperparameters that work well with this environment, try solving a different OpenAI Gym task with discrete actions!\n",
    "- You may like to implement some improvements such as prioritized experience replay, Double DQN, or Dueling DQN! \n",
    "- Write a blog post explaining the intuition behind the DQN algorithm and demonstrating how to use it to solve an RL environment of your choosing.  "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
